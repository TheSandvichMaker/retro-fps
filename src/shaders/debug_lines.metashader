#include "common.hlsli"

struct LineVertex
{
	float3 pos;
	ColorRGBA8 color;
};

@metashader
{
	exports = {
		debug_lines_draw_parameters_t = cbuffer {
			lines = StructuredBuffer(LineVertex),
		},
	},

	draw_parameters = debug_lines_draw_parameters_t,

	shaders = {
		debug_lines_vs = { target = "vs_6_6" },
		debug_lines_ps = { target = "ps_6_6" },
	},

	psos = {
		debug_lines = {
			vs = "debug_lines_vs",
			ps = "debug_lines_ps",

			cull_mode   = "back",
			multisample = true,

			depth_test  = true,
			depth_func  = "greater",
			dsv_format  = "d24_unorm_s8_uint",

			topology    = "line",

			render_targets = {
				{ pf = "r16g16b16a16_float" },
			},
		},
	},
}

struct VS_OUT
{
	float4 position : SV_Position;
	float4 color    : COLOR;
};

VS_OUT debug_lines_vs(uint vertex_index : SV_VertexID)
{
	LineVertex vertex = draw.lines.Get().Load(vertex_index);

	VS_OUT OUT;
	OUT.position = mul(view.world_to_clip, float4(vertex.pos, 1));
	OUT.color    = SRGBToLinear(Unpack(vertex.color));
	return OUT;
}

float4 debug_lines_ps(VS_OUT IN) : SV_Target
{
	return IN.color;
}