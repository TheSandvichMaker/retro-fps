// Generated by metagen.lua from post.metashader

#include "common.hlsli"

// 0: lerp
// 1: screen
#define BLOOM_BLEND 1

#include "gen/post.hlsli"

ConstantBuffer< post_draw_parameters_t > draw : register(b0);

float3 apply_tonemap(float3 color)
{
	return 1.0 - exp(-color);
}

float4 post_ps(fullscreen_triangle_vs_out_t IN) : SV_Target
{
	float2 uv = IN.uv;
	uint2  co = uint2(IN.pos.xy);

	Texture2D<float3> tex_color      = draw.resolved_color.Get();
	Texture2D<float4> tex_blue_noise = draw.blue_noise    .Get();

	float3 color      = tex_color     .Load(uint3(co, 0));
	float4 blue_noise = tex_blue_noise.Load(uint3(co % 64, 0));

	[branch]
	if (draw.bloom_amount > 0.0)
	{
		float3 bloom = draw.bloom0.Get().SampleLevel(df::s_linear_clamped, uv, 0);

#if BLOOM_BLEND == 0
		color = lerp(color, bloom, draw.bloom_amount);
		color = apply_tonemap(color);
#elif BLOOM_BLEND == 1
		color = apply_tonemap(color);
		bloom = apply_tonemap(bloom);
		color = 1.0 - (1.0 - color)*(1.0 - draw.bloom_amount*bloom);
#endif
	}
	else
	{
		color = apply_tonemap(color);
	}

#if DREAM_DEVELOPMENT
	if (any(isnan(color)))
	{
		static const uint NaN[2*8*8] = {
			0, 0, 0, 0, 0, 0, 0, 0,
			0, 1, 0, 0, 0, 0, 1, 0,
			0, 1, 1, 0, 0, 0, 1, 0,
			0, 1, 0, 1, 0, 0, 1, 0,
			0, 1, 0, 0, 1, 0, 1, 0,
			0, 1, 0, 0, 0, 1, 1, 0,
			0, 1, 0, 0, 0, 0, 1, 0,
			0, 0, 0, 0, 0, 0, 0, 0,

			0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 1, 1, 1, 1, 0, 0,
			0, 1, 0, 0, 0, 1, 0, 0,
			0, 1, 0, 0, 0, 1, 0, 0,
			0, 1, 0, 0, 0, 1, 0, 0,
			0, 0, 1, 1, 1, 0, 1, 0,
			0, 0, 0, 0, 0, 0, 0, 0,
		};

		uint x = co.x % 8;
		uint y = co.y % 8;
		uint n = (co.x / 8) % 2;
		uint i = n*8*8 + y*8 + x;
		uint xo = 8*(view.frame_index / view.refresh_rate);
		uint xi = (((co.x - xo) / 24) & 1) ^ (((co.x - xo + 16) / 24) & 1);
		uint yi = (co.y / 8) & 1;
		uint blink = xi ^ yi ^ ((xo / 24) & 1);

		color = NaN[i] ^ blink ? float3(1, 0, 0) : float3(0, 0, 0);
	}
#endif

	float3 dither = RemapTriPDF(blue_noise.rgb) / 255.0;
	color += dither;

	return float4(color, 1.0);
}
