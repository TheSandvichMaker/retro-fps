// Generated by metagen.lua

#include "bindless.hlsli"

#include "common.hlsli"

struct texture_viewer_draw_parameters_t
{
	df::Resource< Texture2D< float4 > > texture;
	float2 texture_dim;
	uint flags;
	float hdr_range;
	int sample_count;
};

ConstantBuffer< texture_viewer_draw_parameters_t > draw : register(b0);



float4 texture_viewer_ps(fullscreen_triangle_vs_out_t IN) : SV_Target
{
	float2 uv = IN.uv;
	uint2  co = floor(uv*draw.texture_dim);

	int sample_count = draw.sample_count;

	float4 color = 0.0;

	if (sample_count > 1)
	{
		Texture2DMS<float4> texture = draw.texture.GetAs< Texture2DMS<float4> >();

		for (int i = 0; i < sample_count; i++)
		{
			color += texture.Load(co, i);
		}

		color /= (float)sample_count;
	}
	else
	{
		Texture2D<float4> texture = draw.texture.Get();
		color = texture.Sample(df::s_linear_border, uv);
	}

	color.rgb *= draw.hdr_range;

	if (draw.flags & 0x1)
	{
		color.rgb = 1.0 - exp(-color.rgb);
	}

	return color;
}